!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):"object"==typeof exports?exports.Instantly=e():t.Instantly=e()}(this,function(){return function(t){function e(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){t.exports=n(3)},function(t,e,n){function i(t){return r(t)&&c.call(t)==o}function r(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}var o="[object Function]",s=Object.prototype,c=s.toString;t.exports=i},function(t,e,n){function i(t){return!!t&&"object"==typeof t}function r(t){return"string"==typeof t||i(t)&&c.call(t)==o}var o="[object String]",s=Object.prototype,c=s.toString;t.exports=r},function(t,e,n){"use strict";function i(t,e){if(!t)throw new TypeError("You need to provide a channel we can listen to!");this.channel=t,e||(e={}),this.retries=e.retries||5,this.timeout=e.timeout||15e3,this.errorHandler=o(e.error)?e.error:null,e.closeConnNotFocus&&document.addEventListener("visibilitychange",this.onVisibilityChange.bind(this))}var r=n(2),o=n(1);i.prototype={initialized:!1,callbacks:{},internalRetry:0,on:function(t,e){if(!o(e))throw new TypeError("Callback is not a function");if(!r(t))throw new TypeError("Event is not a string");this.callbacks[t]=e},listen:function(){if(window.EventSource){this.es=new EventSource(this.channel),this.es.addEventListener("open",this.open.bind(this)),this.es.addEventListener("error",this.error.bind(this));for(var t in this.callbacks){if(!this.callbacks.hasOwnProperty(t))return;this.es.addEventListener(t,this.callbacks[t])}}},retry:function(){this.initialized||this.internalRetry===this.retries||setTimeout(function(){this.listen(),this.internalRetry++}.bind(this),this.timeout)},open:function(){this.initialized=!0,this.internalRetry=0},close:function(){this.es.close(),this.initialized=!1},error:function(t){this.close(),this.retry(),this.errorHandler&&this.errorHandler.call(this,t)},onVisibilityChange:function(){document.hidden?this.close():this.listen()}},t.exports=i}])});